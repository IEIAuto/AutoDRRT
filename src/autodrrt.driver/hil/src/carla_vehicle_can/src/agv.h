/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.0 Thu Apr 11 11:10:22 2024.
 */

#ifndef AGV_H
#define AGV_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define AGV_THROTTLE_COMMAND_FRAME_ID (0x110u)
#define AGV_BRAKE_COMMAND_FRAME_ID (0x111u)
#define AGV_STEER_COMMAND_FRAME_ID (0x112u)
#define AGV_TURNSIGNAL_COMMAND_FRAME_ID (0x113u)
#define AGV_GEAR_COMMAND_FRAME_ID (0x114u)
#define AGV_CONTROL_COMMAND_FRAME_ID (0x115u)
#define AGV_THROTTLE_STATUS__FRAME_ID (0x510u)
#define AGV_BRAKE_STATUS__FRAME_ID (0x511u)
#define AGV_STEER_STATUS__FRAME_ID (0x512u)
#define AGV_TURNSIGNAL_STATUS__FRAME_ID (0x513u)
#define AGV_GEAR_STATUS_FRAME_ID (0x514u)
#define AGV_ECU_STATUS_1_FRAME_ID (0x515u)
#define AGV_ECU_STATUS_2_FRAME_ID (0x516u)
#define AGV_ECU_STATUS_3_FRAME_ID (0x517u)
#define AGV_ECU_STATUS_4_FRAME_ID (0x518u)
#define AGV_ECU_STATUS_5_FRAME_ID (0x519u)
#define AGV_ECU_STATUS_6_FRAME_ID (0x51au)

/* Frame lengths in bytes. */
#define AGV_THROTTLE_COMMAND_LENGTH (2u)
#define AGV_BRAKE_COMMAND_LENGTH (2u)
#define AGV_STEER_COMMAND_LENGTH (3u)
#define AGV_TURNSIGNAL_COMMAND_LENGTH (1u)
#define AGV_GEAR_COMMAND_LENGTH (1u)
#define AGV_CONTROL_COMMAND_LENGTH (1u)
#define AGV_THROTTLE_STATUS__LENGTH (4u)
#define AGV_BRAKE_STATUS__LENGTH (7u)
#define AGV_STEER_STATUS__LENGTH (5u)
#define AGV_TURNSIGNAL_STATUS__LENGTH (1u)
#define AGV_GEAR_STATUS_LENGTH (1u)
#define AGV_ECU_STATUS_1_LENGTH (8u)
#define AGV_ECU_STATUS_2_LENGTH (8u)
#define AGV_ECU_STATUS_3_LENGTH (8u)
#define AGV_ECU_STATUS_4_LENGTH (8u)
#define AGV_ECU_STATUS_5_LENGTH (8u)
#define AGV_ECU_STATUS_6_LENGTH (8u)

/* Extended or standard frame types. */
#define AGV_THROTTLE_COMMAND_IS_EXTENDED (0)
#define AGV_BRAKE_COMMAND_IS_EXTENDED (0)
#define AGV_STEER_COMMAND_IS_EXTENDED (0)
#define AGV_TURNSIGNAL_COMMAND_IS_EXTENDED (0)
#define AGV_GEAR_COMMAND_IS_EXTENDED (0)
#define AGV_CONTROL_COMMAND_IS_EXTENDED (0)
#define AGV_THROTTLE_STATUS__IS_EXTENDED (0)
#define AGV_BRAKE_STATUS__IS_EXTENDED (0)
#define AGV_STEER_STATUS__IS_EXTENDED (0)
#define AGV_TURNSIGNAL_STATUS__IS_EXTENDED (0)
#define AGV_GEAR_STATUS_IS_EXTENDED (0)
#define AGV_ECU_STATUS_1_IS_EXTENDED (0)
#define AGV_ECU_STATUS_2_IS_EXTENDED (0)
#define AGV_ECU_STATUS_3_IS_EXTENDED (0)
#define AGV_ECU_STATUS_4_IS_EXTENDED (0)
#define AGV_ECU_STATUS_5_IS_EXTENDED (0)
#define AGV_ECU_STATUS_6_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define AGV_THROTTLE_COMMAND_CYCLE_TIME_MS (20u)
#define AGV_BRAKE_COMMAND_CYCLE_TIME_MS (20u)
#define AGV_STEER_COMMAND_CYCLE_TIME_MS (20u)
#define AGV_TURNSIGNAL_COMMAND_CYCLE_TIME_MS (20u)
#define AGV_GEAR_COMMAND_CYCLE_TIME_MS (20u)
#define AGV_THROTTLE_STATUS__CYCLE_TIME_MS (20u)
#define AGV_BRAKE_STATUS__CYCLE_TIME_MS (20u)
#define AGV_STEER_STATUS__CYCLE_TIME_MS (20u)
#define AGV_TURNSIGNAL_STATUS__CYCLE_TIME_MS (20u)
#define AGV_GEAR_STATUS_CYCLE_TIME_MS (20u)
#define AGV_ECU_STATUS_1_CYCLE_TIME_MS (20u)
#define AGV_ECU_STATUS_2_CYCLE_TIME_MS (20u)
#define AGV_ECU_STATUS_3_CYCLE_TIME_MS (40u)
#define AGV_ECU_STATUS_4_CYCLE_TIME_MS (40u)

/* Signal choices. */
#define AGV_THROTTLE_COMMAND_THROTTLE_PEDAL_EN_CTRL_DISABLE_CHOICE (0u)
#define AGV_THROTTLE_COMMAND_THROTTLE_PEDAL_EN_CTRL_ENABLE_CHOICE (1u)

#define AGV_BRAKE_COMMAND_BRAKE_PEDAL_EN_CTRL_DISABLE_CHOICE (0u)
#define AGV_BRAKE_COMMAND_BRAKE_PEDAL_EN_CTRL_ENABLE_CHOICE (1u)

#define AGV_STEER_COMMAND_STEER_ANGLE_EN_CTRL_DISABLE_CHOICE (0u)
#define AGV_STEER_COMMAND_STEER_ANGLE_EN_CTRL_ENABLE_CHOICE (1u)

#define AGV_TURNSIGNAL_COMMAND_TURN_SIGNAL_CMD_NONE_CHOICE (0u)
#define AGV_TURNSIGNAL_COMMAND_TURN_SIGNAL_CMD_LEFT_CHOICE (1u)
#define AGV_TURNSIGNAL_COMMAND_TURN_SIGNAL_CMD_RIGHT_CHOICE (2u)

#define AGV_GEAR_COMMAND_GEAR_CMD_PARK_CHOICE (1u)
#define AGV_GEAR_COMMAND_GEAR_CMD_REVERSE_CHOICE (2u)
#define AGV_GEAR_COMMAND_GEAR_CMD_NEUTRAL_CHOICE (3u)
#define AGV_GEAR_COMMAND_GEAR_CMD_DRIVE_CHOICE (4u)

#define AGV_CONTROL_COMMAND_CTRL_CMD_OUT_OF_CONTROL_CHOICE (0u)
#define AGV_CONTROL_COMMAND_CTRL_CMD_UNDER_CONTROL_CHOICE (1u)

#define AGV_THROTTLE_STATUS__THROTTLE_PEDAL_EN_STS_DISABLE_CHOICE (0u)
#define AGV_THROTTLE_STATUS__THROTTLE_PEDAL_EN_STS_ENABLE_CHOICE (1u)
#define AGV_THROTTLE_STATUS__THROTTLE_PEDAL_EN_STS_TAKEOVER_CHOICE (2u)

#define AGV_THROTTLE_STATUS__DRIVE_MOTOR_ERR_NOERR_CHOICE (0u)
#define AGV_THROTTLE_STATUS__DRIVE_MOTOR_ERR_DRV_MOTOR_ERR_CHOICE (1u)

#define AGV_THROTTLE_STATUS__BATTERY_BMS_ERR_NOERR_CHOICE (0u)
#define AGV_THROTTLE_STATUS__BATTERY_BMS_ERR_BATTERY_ERR_CHOICE (1u)

#define AGV_BRAKE_STATUS__BRAKE_PEDAL_EN_STS_DISABLE_CHOICE (0u)
#define AGV_BRAKE_STATUS__BRAKE_PEDAL_EN_STS_ENABLE_CHOICE (1u)
#define AGV_BRAKE_STATUS__BRAKE_PEDAL_EN_STS_TAKEOVER_CHOICE (2u)

#define AGV_BRAKE_STATUS__BRAKE_ERR_NOERR_CHOICE (0u)
#define AGV_BRAKE_STATUS__BRAKE_ERR_BRAKE_SYSTEM_ERR_CHOICE (1u)

#define AGV_BRAKE_STATUS__EMERGENCY_BTN_ENV_NOENV_CHOICE (0u)
#define AGV_BRAKE_STATUS__EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV_CHOICE (1u)

#define AGV_BRAKE_STATUS__FRONT_BUMP_ENV_NOENV_CHOICE (0u)
#define AGV_BRAKE_STATUS__FRONT_BUMP_ENV_FRONT_BUMPER_ENV_CHOICE (1u)

#define AGV_BRAKE_STATUS__BACK_BUMP_ENV_NOENV_CHOICE (0u)
#define AGV_BRAKE_STATUS__BACK_BUMP_ENV_BACK_BUMPER_ENV_CHOICE (1u)

#define AGV_BRAKE_STATUS__OVERSPD_ENV_NOENV_CHOICE (0u)
#define AGV_BRAKE_STATUS__OVERSPD_ENV_OVERSPEED_ENV_CHOICE (1u)

#define AGV_STEER_STATUS__STEER_ANGLE_EN_STS_DISABLE_CHOICE (0u)
#define AGV_STEER_STATUS__STEER_ANGLE_EN_STS_ENABLE_CHOICE (1u)
#define AGV_STEER_STATUS__STEER_ANGLE_EN_STS_TAKEOVER_CHOICE (2u)

#define AGV_STEER_STATUS__STEER_ERR_NOERR_CHOICE (0u)
#define AGV_STEER_STATUS__STEER_ERR_STEER_MOTOR_ERR_CHOICE (1u)

#define AGV_STEER_STATUS__SENSOR_ERR_NOERR_CHOICE (0u)
#define AGV_STEER_STATUS__SENSOR_ERR_STEER_SENSOR_ERR_CHOICE (1u)

#define AGV_TURNSIGNAL_STATUS__TURN_SIGNAL_STS_NONE_CHOICE (0u)
#define AGV_TURNSIGNAL_STATUS__TURN_SIGNAL_STS_LEFT_CHOICE (1u)
#define AGV_TURNSIGNAL_STATUS__TURN_SIGNAL_STS_RIGHT_CHOICE (2u)

#define AGV_GEAR_STATUS_GEAR_STS_PARK_CHOICE (1u)
#define AGV_GEAR_STATUS_GEAR_STS_REVERSE_CHOICE (2u)
#define AGV_GEAR_STATUS_GEAR_STS_NEUTRAL_CHOICE (3u)
#define AGV_GEAR_STATUS_GEAR_STS_DRIVE_CHOICE (4u)

#define AGV_ECU_STATUS_1_CTRL_STS_OUT_OF_CONTROL_CHOICE (0u)
#define AGV_ECU_STATUS_1_CTRL_STS_UNDER_CONTROL_CHOICE (1u)

/* Frame Names. */
#define AGV_THROTTLE_COMMAND_NAME "Throttle_Command"
#define AGV_BRAKE_COMMAND_NAME "Brake_Command"
#define AGV_STEER_COMMAND_NAME "Steer_Command"
#define AGV_TURNSIGNAL_COMMAND_NAME "Turnsignal_Command"
#define AGV_GEAR_COMMAND_NAME "Gear_Command"
#define AGV_CONTROL_COMMAND_NAME "Control_Command"
#define AGV_THROTTLE_STATUS__NAME "Throttle_Status_"
#define AGV_BRAKE_STATUS__NAME "Brake_Status_"
#define AGV_STEER_STATUS__NAME "Steer_Status_"
#define AGV_TURNSIGNAL_STATUS__NAME "Turnsignal_Status_"
#define AGV_GEAR_STATUS_NAME "Gear_Status"
#define AGV_ECU_STATUS_1_NAME "ECU_Status_1"
#define AGV_ECU_STATUS_2_NAME "ECU_Status_2"
#define AGV_ECU_STATUS_3_NAME "ECU_Status_3"
#define AGV_ECU_STATUS_4_NAME "ECU_Status_4"
#define AGV_ECU_STATUS_5_NAME "ECU_Status_5"
#define AGV_ECU_STATUS_6_NAME "ECU_Status_6"

/* Signal Names. */
#define AGV_THROTTLE_COMMAND_THROTTLE_PEDAL_EN_CTRL_NAME "THROTTLE_PEDAL_EN_CTRL"
#define AGV_THROTTLE_COMMAND_THROTTLE_PEDAL_CMD_NAME "THROTTLE_PEDAL_CMD"
#define AGV_BRAKE_COMMAND_BRAKE_PEDAL_EN_CTRL_NAME "BRAKE_PEDAL_EN_CTRL"
#define AGV_BRAKE_COMMAND_BRAKE_PEDAL_CMD_NAME "BRAKE_PEDAL_CMD"
#define AGV_STEER_COMMAND_STEER_ANGLE_EN_CTRL_NAME "STEER_ANGLE_EN_CTRL"
#define AGV_STEER_COMMAND_STEER_ANGLE_CMD_NAME "STEER_ANGLE_CMD"
#define AGV_TURNSIGNAL_COMMAND_TURN_SIGNAL_CMD_NAME "TURN_SIGNAL_CMD"
#define AGV_GEAR_COMMAND_GEAR_CMD_NAME "GEAR_CMD"
#define AGV_CONTROL_COMMAND_CTRL_CMD_NAME "CTRL_CMD"
#define AGV_THROTTLE_STATUS__THROTTLE_PEDAL_EN_STS_NAME "THROTTLE_PEDAL_EN_STS"
#define AGV_THROTTLE_STATUS__THROTTLE_PEDAL_STS_NAME "THROTTLE_PEDAL_STS"
#define AGV_THROTTLE_STATUS__DRIVE_MOTOR_ERR_NAME "DRIVE_MOTOR_ERR"
#define AGV_THROTTLE_STATUS__BATTERY_BMS_ERR_NAME "BATTERY_BMS_ERR"
#define AGV_BRAKE_STATUS__BRAKE_PEDAL_EN_STS_NAME "BRAKE_PEDAL_EN_STS"
#define AGV_BRAKE_STATUS__BRAKE_PEDAL_STS_NAME "BRAKE_PEDAL_STS"
#define AGV_BRAKE_STATUS__BRAKE_ERR_NAME "BRAKE_ERR"
#define AGV_BRAKE_STATUS__EMERGENCY_BTN_ENV_NAME "EMERGENCY_BTN_ENV"
#define AGV_BRAKE_STATUS__FRONT_BUMP_ENV_NAME "FRONT_BUMP_ENV"
#define AGV_BRAKE_STATUS__BACK_BUMP_ENV_NAME "BACK_BUMP_ENV"
#define AGV_BRAKE_STATUS__OVERSPD_ENV_NAME "OVERSPD_ENV"
#define AGV_STEER_STATUS__STEER_ANGLE_EN_STS_NAME "STEER_ANGLE_EN_STS"
#define AGV_STEER_STATUS__STEER_ANGLE_STS_NAME "STEER_ANGLE_STS"
#define AGV_STEER_STATUS__STEER_ERR_NAME "STEER_ERR"
#define AGV_STEER_STATUS__SENSOR_ERR_NAME "SENSOR_ERR"
#define AGV_TURNSIGNAL_STATUS__TURN_SIGNAL_STS_NAME "TURN_SIGNAL_STS"
#define AGV_GEAR_STATUS_GEAR_STS_NAME "GEAR_STS"
#define AGV_ECU_STATUS_1_SPEED_NAME "SPEED"
#define AGV_ECU_STATUS_1_ACC_SPEED_NAME "ACC_SPEED"
#define AGV_ECU_STATUS_1_CTRL_STS_NAME "CTRL_STS"
#define AGV_ECU_STATUS_1_CHASSIS_STS_NAME "CHASSIS_STS"
#define AGV_ECU_STATUS_1_CHASSIS_ERR_NAME "CHASSIS_ERR"
#define AGV_ECU_STATUS_2_BATTERY_SOC_NAME "BATTERY_SOC"
#define AGV_ECU_STATUS_2_BATTERY_CAPACITY_NAME "BATTERY_CAPACITY"
#define AGV_ECU_STATUS_2_BATTERY_VOLTAGE_NAME "BATTERY_VOLTAGE"
#define AGV_ECU_STATUS_2_BATTERY_CURRENT_NAME "BATTERY_CURRENT"
#define AGV_ECU_STATUS_2_BATTERY_TEMPERATURE_NAME "BATTERY_TEMPERATURE"
#define AGV_ECU_STATUS_3_ULTRASOUND_DIST_1_NAME "ULTRASOUND_DIST_1"
#define AGV_ECU_STATUS_3_ULTRASOUND_DIST_2_NAME "ULTRASOUND_DIST_2"
#define AGV_ECU_STATUS_3_ULTRASOUND_DIST_3_NAME "ULTRASOUND_DIST_3"
#define AGV_ECU_STATUS_3_ULTRASOUND_DIST_4_NAME "ULTRASOUND_DIST_4"
#define AGV_ECU_STATUS_3_ULTRASOUND_DIST_5_NAME "ULTRASOUND_DIST_5"
#define AGV_ECU_STATUS_3_ULTRASOUND_DIST_6_NAME "ULTRASOUND_DIST_6"
#define AGV_ECU_STATUS_3_ULTRASOUND_DIST_7_NAME "ULTRASOUND_DIST_7"
#define AGV_ECU_STATUS_3_ULTRASOUND_DIST_8_NAME "ULTRASOUND_DIST_8"
#define AGV_ECU_STATUS_4_ULTRASOUND_DIST_09_NAME "ULTRASOUND_DIST_09"
#define AGV_ECU_STATUS_4_ULTRASOUND_DIST_10_NAME "ULTRASOUND_DIST_10"
#define AGV_ECU_STATUS_4_ULTRASOUND_DIST_11_NAME "ULTRASOUND_DIST_11"
#define AGV_ECU_STATUS_4_ULTRASOUND_DIST_12_NAME "ULTRASOUND_DIST_12"
#define AGV_ECU_STATUS_4_ULTRASOUND_DIST_13_NAME "ULTRASOUND_DIST_13"
#define AGV_ECU_STATUS_4_ULTRASOUND_DIST_14_NAME "ULTRASOUND_DIST_14"
#define AGV_ECU_STATUS_4_ULTRASOUND_DIST_15_NAME "ULTRASOUND_DIST_15"
#define AGV_ECU_STATUS_4_ULTRASOUND_DIST_16_NAME "ULTRASOUND_DIST_16"
#define AGV_ECU_STATUS_5_WHEEL_L_TICK_COUNT_NAME "WHEEL_L_TICK_COUNT"
#define AGV_ECU_STATUS_5_WHEEL_L_TICK_RATE_NAME "WHEEL_L_TICK_RATE"
#define AGV_ECU_STATUS_5_WHEEL_L_ROTATIONAL_RATE_NAME "WHEEL_L_ROTATIONAL_RATE"
#define AGV_ECU_STATUS_5_WHEEL_L_SPEED_NAME "WHEEL_L_SPEED"
#define AGV_ECU_STATUS_6_WHEEL_R_TICK_COUNT_NAME "WHEEL_R_TICK_COUNT"
#define AGV_ECU_STATUS_6_WHEEL_R_TICK_RATE_NAME "WHEEL_R_TICK_RATE"
#define AGV_ECU_STATUS_6_WHEEL_R_ROTATIONAL_RATE_NAME "WHEEL_R_ROTATIONAL_RATE"
#define AGV_ECU_STATUS_6_WHEEL_R_SPEED_NAME "WHEEL_R_SPEED"

/**
 * Signals in message Throttle_Command.
 *
 * Vehicle open-loop control command: THROTTLE_PEDAL_CMD
 *
 * All signal values are as on the CAN bus.
 */
struct agv_throttle_command_t {
    /**
     * throttle pedal enable bit(Command)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttle_pedal_en_ctrl;

    /**
     * Percentage of throttle pedal(Command)
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttle_pedal_cmd;
};

/**
 * Signals in message Brake_Command.
 *
 * Vehicle open-loop control command: BRAKE_PEDAL_CMD
 *
 * All signal values are as on the CAN bus.
 */
struct agv_brake_command_t {
    /**
     * brake pedal enable bit(Command)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pedal_en_ctrl;

    /**
     * Percentage of brake pedal(Command)
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pedal_cmd;
};

/**
 * Signals in message Steer_Command.
 *
 * Vehicle open-loop control command: STEER_ANGLE_CMD
 *
 * All signal values are as on the CAN bus.
 */
struct agv_steer_command_t {
    /**
     * steering angle enable bit(Command)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steer_angle_en_ctrl;

    /**
     * Current steering angle(Command)
     *
     * Range: -524..524 (-0.524..0.524 radian)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t steer_angle_cmd;
};

/**
 * Signals in message Turnsignal_Command.
 *
 * Vehicle open-loop control command: TURN_SIGNAL_CMD
 *
 * All signal values are as on the CAN bus.
 */
struct agv_turnsignal_command_t {
    /**
     * Lighting control(Command)
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t turn_signal_cmd;
};

/**
 * Signals in message Gear_Command.
 *
 * Vehicle open-loop control command: GEAR_CMD
 *
 * All signal values are as on the CAN bus.
 */
struct agv_gear_command_t {
    /**
     * PRND control(Command)
     *
     * Range: 1..4 (1..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_cmd;
};

/**
 * Signals in message Control_Command.
 *
 * Vehicle open-loop control command: CTRL_CMD
 *
 * All signal values are as on the CAN bus.
 */
struct agv_control_command_t {
    /**
     * Take control(Command)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ctrl_cmd;
};

/**
 * Signals in message Throttle_Status_.
 *
 * Vehicle open-loop control status: THROTTLE_PEDAL_STS
 *
 * All signal values are as on the CAN bus.
 */
struct agv_throttle_status__t {
    /**
     * throttle pedal enable bit(Status)
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttle_pedal_en_sts;

    /**
     * Percentage of throttle pedal(Status)
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttle_pedal_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_motor_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_bms_err;
};

/**
 * Signals in message Brake_Status_.
 *
 * Vehicle open-loop control status: BRAKE_PEDAL_STS
 *
 * All signal values are as on the CAN bus.
 */
struct agv_brake_status__t {
    /**
     * brake pedal enable bit(Status)
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pedal_en_sts;

    /**
     * Percentage of brake pedal(Status)
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pedal_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t emergency_btn_env;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_bump_env;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t back_bump_env;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t overspd_env;
};

/**
 * Signals in message Steer_Status_.
 *
 * Vehicle open-loop control status: STEER_ANGLE_STS
 *
 * All signal values are as on the CAN bus.
 */
struct agv_steer_status__t {
    /**
     * steering angle enable bit(Status)
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steer_angle_en_sts;

    /**
     * Current steering angle(Status)
     *
     * Range: -524..524 (-0.524..0.524 radian)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t steer_angle_sts;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t steer_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sensor_err;
};

/**
 * Signals in message Turnsignal_Status_.
 *
 * Vehicle open-loop control status: TURN_SIGNAL_STS
 *
 * All signal values are as on the CAN bus.
 */
struct agv_turnsignal_status__t {
    /**
     * Lighting control(Status)
     *
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t turn_signal_sts;
};

/**
 * Signals in message Gear_Status.
 *
 * Vehicle open-loop control status: GEAR_STS
 *
 * All signal values are as on the CAN bus.
 */
struct agv_gear_status_t {
    /**
     * PRND control(Status)
     *
     * Range: 1..4 (1..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_sts;
};

/**
 * Signals in message ECU_Status_1.
 *
 * AGV status 1: speed, accelerated speed, out of control, chassis status, chassis error code
 *
 * All signal values are as on the CAN bus.
 */
struct agv_ecu_status_1_t {
    /**
     * Current speed (Steering status)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t speed;

    /**
     * Current acceleration (Steering status)
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t acc_speed;

    /**
     * Current Auto-mode state (Chassis status)
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ctrl_sts;

    /**
     * Current chassis state (Chassis status)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chassis_sts;

    /**
     * Chassis error code (Chassis status)
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t chassis_err;
};

/**
 * Signals in message ECU_Status_2.
 *
 * AGV status 2: BMS status
 *
 * All signal values are as on the CAN bus.
 */
struct agv_ecu_status_2_t {
    /**
     * Percentage of battery remaining (BMS status)
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_soc;

    /**
     * Battery full capacity (BMS status)
     *
     * Range: 0..100 (0..100 Ah)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_capacity;

    /**
     * Current battery voltage (BMS status)
     *
     * Range: 0..800 (0..80 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t battery_voltage;

    /**
     * Current battery current (BMS status)
     *
     * Range: -600..600 (-60..60 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_current;

    /**
     * Current battery temperature (BMS status)
     *
     * Range: -40..110 (-40..110 ¡æ)
     * Scale: 1
     * Offset: 0
     */
    int16_t battery_temperature;
};

/**
 * Signals in message ECU_Status_3.
 *
 * AGV status 3: Ultrasound status
 *
 * All signal values are as on the CAN bus.
 */
struct agv_ecu_status_3_t {
    /**
     * Ultrasonic detection distance 1 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_1;

    /**
     * Ultrasonic detection distance 2 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_2;

    /**
     * Ultrasonic detection distance 3 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_3;

    /**
     * Ultrasonic detection distance 4 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_4;

    /**
     * Ultrasonic detection distance 5 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_5;

    /**
     * Ultrasonic detection distance 6 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_6;

    /**
     * Ultrasonic detection distance 7 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_7;

    /**
     * Ultrasonic detection distance 8 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_8;
};

/**
 * Signals in message ECU_Status_4.
 *
 * AGV status 4: Ultrasound status ext
 *
 * All signal values are as on the CAN bus.
 */
struct agv_ecu_status_4_t {
    /**
     * Ultrasonic detection distance 9 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_09;

    /**
     * Ultrasonic detection distance 10 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_10;

    /**
     * Ultrasonic detection distance 11 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_11;

    /**
     * Ultrasonic detection distance 12 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_12;

    /**
     * Ultrasonic detection distance 13 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_13;

    /**
     * Ultrasonic detection distance 14 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_14;

    /**
     * Ultrasonic detection distance 15 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_15;

    /**
     * Ultrasonic detection distance 16 (Ultrasound status)
     *
     * Range: 0..250 (0..500 cm)
     * Scale: 2
     * Offset: 0
     */
    uint8_t ultrasound_dist_16;
};

/**
 * Signals in message ECU_Status_5.
 *
 * ECU status 5, Left wheel: tick_count, tick_rate, rotational_rate, speed
 *
 * All signal values are as on the CAN bus.
 */
struct agv_ecu_status_5_t {
    /**
     * current tick count
     *
     * Range: 0..65535 (0..65535 cnt)
     * Scale: 1
     * Offset: 0
     */
    uint16_t wheel_l_tick_count;

    /**
     * counts per second
     *
     * Range: -980..980 (-980..980 cnt/s)
     * Scale: 1
     * Offset: 0
     */
    int16_t wheel_l_tick_rate;

    /**
     * radians per second
     *
     * Range: -5130..5130 (-51.3..51.3 rad/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t wheel_l_rotational_rate;

    /**
     * meters per second
     *
     * Range: -1111..1111 (-11.11..11.11 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t wheel_l_speed;
};

/**
 * Signals in message ECU_Status_6.
 *
 * ECU status 6, right wheel: tick_count, tick_rate, rotational_rate, speed
 *
 * All signal values are as on the CAN bus.
 */
struct agv_ecu_status_6_t {
    /**
     * current tick count
     *
     * Range: 0..65535 (0..65535 cnt)
     * Scale: 1
     * Offset: 0
     */
    uint16_t wheel_r_tick_count;

    /**
     * counts per second
     *
     * Range: -980..980 (-980..980 cnt/s)
     * Scale: 1
     * Offset: 0
     */
    int16_t wheel_r_tick_rate;

    /**
     * radians per second
     *
     * Range: -5130..5130 (-51.3..51.3 rad/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t wheel_r_rotational_rate;

    /**
     * meters per second
     *
     * Range: -1111..1111 (-11.11..11.11 m/s)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t wheel_r_speed;
};

/**
 * Pack message Throttle_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_throttle_command_pack(
    uint8_t *dst_p,
    const struct agv_throttle_command_t *src_p,
    size_t size);

/**
 * Unpack message Throttle_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_throttle_command_unpack(
    struct agv_throttle_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Throttle_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_throttle_command_init(struct agv_throttle_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_throttle_command_throttle_pedal_en_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_throttle_command_throttle_pedal_en_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_throttle_command_throttle_pedal_en_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_throttle_command_throttle_pedal_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_throttle_command_throttle_pedal_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_throttle_command_throttle_pedal_cmd_is_in_range(uint8_t value);

/**
 * Pack message Brake_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_brake_command_pack(
    uint8_t *dst_p,
    const struct agv_brake_command_t *src_p,
    size_t size);

/**
 * Unpack message Brake_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_brake_command_unpack(
    struct agv_brake_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Brake_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_brake_command_init(struct agv_brake_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_command_brake_pedal_en_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_command_brake_pedal_en_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_command_brake_pedal_en_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_command_brake_pedal_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_command_brake_pedal_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_command_brake_pedal_cmd_is_in_range(uint8_t value);

/**
 * Pack message Steer_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_steer_command_pack(
    uint8_t *dst_p,
    const struct agv_steer_command_t *src_p,
    size_t size);

/**
 * Unpack message Steer_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_steer_command_unpack(
    struct agv_steer_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Steer_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_steer_command_init(struct agv_steer_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_steer_command_steer_angle_en_ctrl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_steer_command_steer_angle_en_ctrl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_steer_command_steer_angle_en_ctrl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_steer_command_steer_angle_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_steer_command_steer_angle_cmd_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_steer_command_steer_angle_cmd_is_in_range(int16_t value);

/**
 * Pack message Turnsignal_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_turnsignal_command_pack(
    uint8_t *dst_p,
    const struct agv_turnsignal_command_t *src_p,
    size_t size);

/**
 * Unpack message Turnsignal_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_turnsignal_command_unpack(
    struct agv_turnsignal_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Turnsignal_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_turnsignal_command_init(struct agv_turnsignal_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_turnsignal_command_turn_signal_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_turnsignal_command_turn_signal_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_turnsignal_command_turn_signal_cmd_is_in_range(uint8_t value);

/**
 * Pack message Gear_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_gear_command_pack(
    uint8_t *dst_p,
    const struct agv_gear_command_t *src_p,
    size_t size);

/**
 * Unpack message Gear_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_gear_command_unpack(
    struct agv_gear_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Gear_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_gear_command_init(struct agv_gear_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_gear_command_gear_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_gear_command_gear_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_gear_command_gear_cmd_is_in_range(uint8_t value);

/**
 * Pack message Control_Command.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_control_command_pack(
    uint8_t *dst_p,
    const struct agv_control_command_t *src_p,
    size_t size);

/**
 * Unpack message Control_Command.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_control_command_unpack(
    struct agv_control_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_Command.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_control_command_init(struct agv_control_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_control_command_ctrl_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_control_command_ctrl_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_control_command_ctrl_cmd_is_in_range(uint8_t value);

/**
 * Pack message Throttle_Status_.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_throttle_status__pack(
    uint8_t *dst_p,
    const struct agv_throttle_status__t *src_p,
    size_t size);

/**
 * Unpack message Throttle_Status_.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_throttle_status__unpack(
    struct agv_throttle_status__t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Throttle_Status_.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_throttle_status__init(struct agv_throttle_status__t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_throttle_status__throttle_pedal_en_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_throttle_status__throttle_pedal_en_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_throttle_status__throttle_pedal_en_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_throttle_status__throttle_pedal_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_throttle_status__throttle_pedal_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_throttle_status__throttle_pedal_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_throttle_status__drive_motor_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_throttle_status__drive_motor_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_throttle_status__drive_motor_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_throttle_status__battery_bms_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_throttle_status__battery_bms_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_throttle_status__battery_bms_err_is_in_range(uint8_t value);

/**
 * Pack message Brake_Status_.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_brake_status__pack(
    uint8_t *dst_p,
    const struct agv_brake_status__t *src_p,
    size_t size);

/**
 * Unpack message Brake_Status_.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_brake_status__unpack(
    struct agv_brake_status__t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Brake_Status_.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_brake_status__init(struct agv_brake_status__t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_status__brake_pedal_en_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_status__brake_pedal_en_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_status__brake_pedal_en_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_status__brake_pedal_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_status__brake_pedal_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_status__brake_pedal_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_status__brake_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_status__brake_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_status__brake_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_status__emergency_btn_env_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_status__emergency_btn_env_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_status__emergency_btn_env_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_status__front_bump_env_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_status__front_bump_env_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_status__front_bump_env_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_status__back_bump_env_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_status__back_bump_env_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_status__back_bump_env_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_brake_status__overspd_env_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_brake_status__overspd_env_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_brake_status__overspd_env_is_in_range(uint8_t value);

/**
 * Pack message Steer_Status_.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_steer_status__pack(
    uint8_t *dst_p,
    const struct agv_steer_status__t *src_p,
    size_t size);

/**
 * Unpack message Steer_Status_.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_steer_status__unpack(
    struct agv_steer_status__t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Steer_Status_.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_steer_status__init(struct agv_steer_status__t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_steer_status__steer_angle_en_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_steer_status__steer_angle_en_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_steer_status__steer_angle_en_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_steer_status__steer_angle_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_steer_status__steer_angle_sts_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_steer_status__steer_angle_sts_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_steer_status__steer_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_steer_status__steer_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_steer_status__steer_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_steer_status__sensor_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_steer_status__sensor_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_steer_status__sensor_err_is_in_range(uint8_t value);

/**
 * Pack message Turnsignal_Status_.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_turnsignal_status__pack(
    uint8_t *dst_p,
    const struct agv_turnsignal_status__t *src_p,
    size_t size);

/**
 * Unpack message Turnsignal_Status_.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_turnsignal_status__unpack(
    struct agv_turnsignal_status__t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Turnsignal_Status_.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_turnsignal_status__init(struct agv_turnsignal_status__t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_turnsignal_status__turn_signal_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_turnsignal_status__turn_signal_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_turnsignal_status__turn_signal_sts_is_in_range(uint8_t value);

/**
 * Pack message Gear_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_gear_status_pack(
    uint8_t *dst_p,
    const struct agv_gear_status_t *src_p,
    size_t size);

/**
 * Unpack message Gear_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_gear_status_unpack(
    struct agv_gear_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Gear_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_gear_status_init(struct agv_gear_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_gear_status_gear_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_gear_status_gear_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_gear_status_gear_sts_is_in_range(uint8_t value);

/**
 * Pack message ECU_Status_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_ecu_status_1_pack(
    uint8_t *dst_p,
    const struct agv_ecu_status_1_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Status_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_ecu_status_1_unpack(
    struct agv_ecu_status_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Status_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_ecu_status_1_init(struct agv_ecu_status_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_1_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_1_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_1_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_1_acc_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_1_acc_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_1_acc_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_1_ctrl_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_1_ctrl_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_1_ctrl_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_1_chassis_sts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_1_chassis_sts_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_1_chassis_sts_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t agv_ecu_status_1_chassis_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_1_chassis_err_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_1_chassis_err_is_in_range(uint16_t value);

/**
 * Pack message ECU_Status_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_ecu_status_2_pack(
    uint8_t *dst_p,
    const struct agv_ecu_status_2_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Status_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_ecu_status_2_unpack(
    struct agv_ecu_status_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Status_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_ecu_status_2_init(struct agv_ecu_status_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_2_battery_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_2_battery_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_2_battery_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_2_battery_capacity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_2_battery_capacity_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_2_battery_capacity_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t agv_ecu_status_2_battery_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_2_battery_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_2_battery_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_2_battery_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_2_battery_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_2_battery_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_2_battery_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_2_battery_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_2_battery_temperature_is_in_range(int16_t value);

/**
 * Pack message ECU_Status_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_ecu_status_3_pack(
    uint8_t *dst_p,
    const struct agv_ecu_status_3_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Status_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_ecu_status_3_unpack(
    struct agv_ecu_status_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Status_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_ecu_status_3_init(struct agv_ecu_status_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_3_ultrasound_dist_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_3_ultrasound_dist_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_3_ultrasound_dist_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_3_ultrasound_dist_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_3_ultrasound_dist_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_3_ultrasound_dist_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_3_ultrasound_dist_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_3_ultrasound_dist_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_3_ultrasound_dist_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_3_ultrasound_dist_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_3_ultrasound_dist_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_3_ultrasound_dist_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_3_ultrasound_dist_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_3_ultrasound_dist_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_3_ultrasound_dist_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_3_ultrasound_dist_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_3_ultrasound_dist_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_3_ultrasound_dist_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_3_ultrasound_dist_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_3_ultrasound_dist_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_3_ultrasound_dist_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_3_ultrasound_dist_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_3_ultrasound_dist_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_3_ultrasound_dist_8_is_in_range(uint8_t value);

/**
 * Pack message ECU_Status_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_ecu_status_4_pack(
    uint8_t *dst_p,
    const struct agv_ecu_status_4_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Status_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_ecu_status_4_unpack(
    struct agv_ecu_status_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Status_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_ecu_status_4_init(struct agv_ecu_status_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_4_ultrasound_dist_09_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_4_ultrasound_dist_09_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_4_ultrasound_dist_09_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_4_ultrasound_dist_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_4_ultrasound_dist_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_4_ultrasound_dist_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_4_ultrasound_dist_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_4_ultrasound_dist_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_4_ultrasound_dist_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_4_ultrasound_dist_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_4_ultrasound_dist_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_4_ultrasound_dist_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_4_ultrasound_dist_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_4_ultrasound_dist_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_4_ultrasound_dist_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_4_ultrasound_dist_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_4_ultrasound_dist_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_4_ultrasound_dist_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_4_ultrasound_dist_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_4_ultrasound_dist_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_4_ultrasound_dist_15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t agv_ecu_status_4_ultrasound_dist_16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_4_ultrasound_dist_16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_4_ultrasound_dist_16_is_in_range(uint8_t value);

/**
 * Pack message ECU_Status_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_ecu_status_5_pack(
    uint8_t *dst_p,
    const struct agv_ecu_status_5_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Status_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_ecu_status_5_unpack(
    struct agv_ecu_status_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Status_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_ecu_status_5_init(struct agv_ecu_status_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t agv_ecu_status_5_wheel_l_tick_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_5_wheel_l_tick_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_5_wheel_l_tick_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_5_wheel_l_tick_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_5_wheel_l_tick_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_5_wheel_l_tick_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_5_wheel_l_rotational_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_5_wheel_l_rotational_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_5_wheel_l_rotational_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_5_wheel_l_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_5_wheel_l_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_5_wheel_l_speed_is_in_range(int16_t value);

/**
 * Pack message ECU_Status_6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int agv_ecu_status_6_pack(
    uint8_t *dst_p,
    const struct agv_ecu_status_6_t *src_p,
    size_t size);

/**
 * Unpack message ECU_Status_6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int agv_ecu_status_6_unpack(
    struct agv_ecu_status_6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ECU_Status_6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int agv_ecu_status_6_init(struct agv_ecu_status_6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t agv_ecu_status_6_wheel_r_tick_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_6_wheel_r_tick_count_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_6_wheel_r_tick_count_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_6_wheel_r_tick_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_6_wheel_r_tick_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_6_wheel_r_tick_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_6_wheel_r_rotational_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_6_wheel_r_rotational_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_6_wheel_r_rotational_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t agv_ecu_status_6_wheel_r_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double agv_ecu_status_6_wheel_r_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool agv_ecu_status_6_wheel_r_speed_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
