<?xml version="1.0"?>
<launch>
  <!-- Interface parameters -->
  <arg name="output/objects" default="objects"/>

  <!-- LiDAR parameters -->
  <arg name="input/pointcloud"/>
  <arg name="input/obstacle_segmentation/pointcloud" default="/perception/obstacle_segmentation/pointcloud"/>
  <arg name="container_name" default="pointcloud_container"/>

  <arg name="lidar_detection_model" default="centerpoint" description="options: `centerpoint`, `apollo`, `pointpainting`, `clustering`"/>
  <arg name="lidar_detection_score_threshold" default="0.35"/>

  <arg name="use_object_filter" default="true" description="use object filter"/>
  <arg name="use_pointcloud_container" default="false" description="use pointcloud container for detection preprocessor"/>
  <arg name="use_validator" default="true" description="use obstacle_pointcloud based validator"/>
  <arg name="remove_unknown" default="true"/>
  <arg name="fusion_distance" default="100.0"/>
  <arg name="trust_object_distance" default="100.0"/>

  <!-- Camera parameters -->
  <arg name="image_raw0" default="/image_raw" description="image raw topic name"/>
  <arg name="camera_info0" default="/camera_info" description="camera info topic name"/>
  <arg name="detection_rois0" default="/perception/object_recognition/detection/rois0" description="detection rois output topic name"/>
  <arg name="image_raw1" default="/image_raw1"/>
  <arg name="camera_info1" default="/camera_info1"/>
  <arg name="detection_rois1" default="/perception/object_recognition/detection/rois1"/>
  <arg name="image_raw2" default="/image_raw2"/>
  <arg name="camera_info2" default="/camera_info2"/>
  <arg name="detection_rois2" default="/perception/object_recognition/detection/rois2"/>
  <arg name="image_raw3" default="/image_raw3"/>
  <arg name="camera_info3" default="/camera_info3"/>
  <arg name="detection_rois3" default="/perception/object_recognition/detection/rois3"/>
  <arg name="image_raw4" default="/image_raw4"/>
  <arg name="camera_info4" default="/camera_info4"/>
  <arg name="detection_rois4" default="/perception/object_recognition/detection/rois4"/>
  <arg name="image_raw5" default="/image_raw5"/>
  <arg name="camera_info5" default="/camera_info5"/>
  <arg name="detection_rois5" default="/perception/object_recognition/detection/rois5"/>
  <arg name="image_raw6" default="/image_raw6"/>
  <arg name="camera_info6" default="/camera_info6"/>
  <arg name="detection_rois6" default="/perception/object_recognition/detection/rois6"/>
  <arg name="image_raw7" default="/image_raw7"/>
  <arg name="camera_info7" default="/camera_info7"/>
  <arg name="detection_rois7" default="/perception/object_recognition/detection/rois7"/>
  <arg name="image_number" default="1" description="choose image raw number(1-8)"/>

  <!-- Radar parameters -->
  <arg name="input/radar" default="/sensing/radar/detected_objects"/>
  <arg name="radar_lanelet_filtering_range_param" default="$(find-pkg-share detected_object_validation)/config/object_lanelet_filter.param.yaml"/>
  <arg name="use_near_radar_fusion" default="false"/>
  <arg name="far_object_merger_sync_queue_size" default="20"/>
  <arg name="radar_object_clustering_param_path" default="$(find-pkg-share radar_object_clustering)/config/radar_object_clustering.param.yaml"/>

  <!-- Filter output name. Switch output topic name by 'use_radar_tracking_fusion' parameter defined in perception.launch -->
  <let name="output_of_filtered_objects" value="$(var output/objects)" if="$(var use_radar_tracking_fusion)"/>
  <let name="output_of_filtered_objects" value="near_objects" unless="$(var use_radar_tracking_fusion)"/>

  <!-- Jetson AGX -->
  <!-- <include file="$(find-pkg-share tensorrt_yolo)/launch/yolo.launch.xml">
    <arg name="image_raw0" value="$(var image_raw0)"/>
    <arg name="image_raw1" value="$(var image_raw1)"/>
    <arg name="image_raw2" value="$(var image_raw2)"/>
    <arg name="image_raw3" value="$(var image_raw3)"/>
    <arg name="image_raw4" value="$(var image_raw4)"/>
    <arg name="image_raw5" value="$(var image_raw5)"/>
    <arg name="image_raw6" value="$(var image_raw6)"/>
    <arg name="image_raw7" value="$(var image_raw7)"/>
    <arg name="image_number" value="$(var image_number)"/>
  </include> -->

  <!-- Radar detection -->
  <group>
    <push-ros-namespace namespace="radar"/>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/detection/radar_based_detection.launch.xml">
      <arg name="input/radar" value="$(var input/radar)"/>
      <arg name="output/objects" value="far_objects"/>
      <arg name="filter/angle_threshold" value="1.0472"/>
      <arg name="filter/velocity_threshold" value="3.0"/>
      <arg name="split/velocity_threshold" value="4.5"/>
      <arg name="split_range" value="70.0"/>
      <arg name="radar_object_clustering_param_path" value="$(var radar_object_clustering_param_path)"/>
    </include>
  </group>

  <!-- Pointcloud filter -->
  <group>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/detection/pointcloud_map_filter.launch.py">
      <arg name="input_topic" value="$(var input/obstacle_segmentation/pointcloud)"/>
      <arg name="output_topic" value="pointcloud_map_filtered/pointcloud"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="use_pointcloud_container" value="$(var use_pointcloud_container)"/>
      <arg name="container_name" value="$(var container_name)"/>
      <arg name="use_pointcloud_map" value="$(var use_pointcloud_map)"/>
    </include>
  </group>

  <!-- Clustering -->
  <group>
    <push-ros-namespace namespace="clustering"/>
    <group>
      <let name="euclidean_cluster_output" value="euclidean_cluster/clusters" if="$(var use_roi_based_cluster)"/>
      <let name="euclidean_cluster_output" value="clusters" unless="$(var use_roi_based_cluster)"/>
      <include file="$(find-pkg-share euclidean_cluster)/launch/voxel_grid_based_euclidean_cluster.launch.xml">
        <arg name="input_pointcloud" value="/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud"/>
        <arg name="output_clusters" value="$(var euclidean_cluster_output)"/>
        <arg name="use_low_height_cropbox" value="$(var use_low_height_cropbox)"/>
      </include>
    </group>

    <!-- roi based clustering -->
    <group>
      <include file="$(find-pkg-share image_projection_based_fusion)/launch/roi_pointcloud_fusion.launch.xml" if="$(var use_roi_based_cluster)">
        <arg name="input/camera_info0" value="$(var camera_info0)"/>
        <arg name="input/rois0" value="$(var detection_rois0)"/>
        <arg name="input/camera_info1" value="$(var camera_info1)"/>
        <arg name="input/rois1" value="$(var detection_rois1)"/>
        <arg name="input/camera_info2" value="$(var camera_info2)"/>
        <arg name="input/rois2" value="$(var detection_rois2)"/>
        <arg name="input/camera_info3" value="$(var camera_info3)"/>
        <arg name="input/rois3" value="$(var detection_rois3)"/>
        <arg name="input/camera_info4" value="$(var camera_info4)"/>
        <arg name="input/rois4" value="$(var detection_rois4)"/>
        <arg name="input/camera_info5" value="$(var camera_info5)"/>
        <arg name="input/rois5" value="$(var detection_rois5)"/>
        <arg name="input/camera_info6" value="$(var camera_info6)"/>
        <arg name="input/rois6" value="$(var detection_rois6)"/>
        <arg name="input/camera_info7" value="$(var camera_info7)"/>
        <arg name="input/rois7" value="$(var detection_rois7)"/>
        <arg name="input/rois_number" value="$(var image_number)"/>
        <arg name="input/image0" value="$(var image_raw0)"/>
        <arg name="input/image1" value="$(var image_raw1)"/>
        <arg name="input/image2" value="$(var image_raw2)"/>
        <arg name="input/image3" value="$(var image_raw3)"/>
        <arg name="input/image4" value="$(var image_raw4)"/>
        <arg name="input/image5" value="$(var image_raw5)"/>
        <arg name="input/image6" value="$(var image_raw6)"/>
        <arg name="input/image7" value="$(var image_raw7)"/>
        <arg name="input/pointcloud" value="/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud"/>
        <arg name="output_clusters" value="roi_cluster/clusters"/>
      </include>
    </group>

    <!-- simple_cluster_merger -->
    <group>
      <include file="$(find-pkg-share cluster_merger)/launch/cluster_merger.launch.xml" if="$(var use_roi_based_cluster)">
        <arg name="input/cluster0" value="euclidean_cluster/clusters"/>
        <arg name="input/cluster1" value="roi_cluster/clusters"/>
        <arg name="output/clusters" value="clusters"/>
      </include>
    </group>

    <group>
      <include file="$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml">
        <arg name="input/objects" value="clusters"/>
        <arg name="output/objects" value="objects_with_feature"/>
      </include>
    </group>

    <group>
      <let name="input/clustering" value="/perception/object_recognition/detection/clustering/clusters"/>
      <push-ros-namespace namespace="camera_lidar_fusion"/>
      <!-- Fusion camera-lidar to classify -->

      <!-- euclidean clustering -->
      <group>
        <include file="$(find-pkg-share image_projection_based_fusion)/launch/roi_cluster_fusion.launch.xml">
          <arg name="input/camera_info0" value="$(var camera_info0)"/>
          <arg name="input/rois0" value="$(var detection_rois0)"/>
          <arg name="input/camera_info1" value="$(var camera_info1)"/>
          <arg name="input/rois1" value="$(var detection_rois1)"/>
          <arg name="input/camera_info2" value="$(var camera_info2)"/>
          <arg name="input/rois2" value="$(var detection_rois2)"/>
          <arg name="input/camera_info3" value="$(var camera_info3)"/>
          <arg name="input/rois3" value="$(var detection_rois3)"/>
          <arg name="input/camera_info4" value="$(var camera_info4)"/>
          <arg name="input/rois4" value="$(var detection_rois4)"/>
          <arg name="input/camera_info5" value="$(var camera_info5)"/>
          <arg name="input/rois5" value="$(var detection_rois5)"/>
          <arg name="input/camera_info6" value="$(var camera_info6)"/>
          <arg name="input/rois6" value="$(var detection_rois6)"/>
          <arg name="input/camera_info7" value="$(var camera_info7)"/>
          <arg name="input/rois7" value="$(var detection_rois7)"/>
          <arg name="input/rois_number" value="$(var image_number)"/>
          <arg name="input/clusters" value="$(var input/clustering)"/>
          <arg name="input/image0" value="$(var image_raw0)"/>
          <arg name="input/image1" value="$(var image_raw1)"/>
          <arg name="input/image2" value="$(var image_raw2)"/>
          <arg name="input/image3" value="$(var image_raw3)"/>
          <arg name="input/image4" value="$(var image_raw4)"/>
          <arg name="input/image5" value="$(var image_raw5)"/>
          <arg name="input/image6" value="$(var image_raw6)"/>
          <arg name="input/image7" value="$(var image_raw7)"/>
          <arg name="output/clusters" value="clusters"/>
          <arg name="remove_unknown" value="$(var remove_unknown)"/>
          <arg name="fusion_distance" value="$(var fusion_distance)"/>
          <arg name="trust_object_distance" value="$(var trust_object_distance)"/>
        </include>
      </group>

      <group>
        <include file="$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml">
          <arg name="input/objects" value="clusters"/>
          <arg name="output/objects" value="objects_with_feature"/>
        </include>
      </group>
      <!-- convert DynamicObjectsWithFeatureArray to DynamicObjects -->
      <group>
        <include file="$(find-pkg-share detected_object_feature_remover)/launch/detected_object_feature_remover.launch.xml">
          <arg name="input" value="objects_with_feature"/>
          <arg name="output" value="objects"/>
        </include>
      </group>
    </group>
  </group>

  <!-- DetectionByTracker -->
  <group if="$(var use_detection_by_tracker)">
    <push-ros-namespace namespace="detection_by_tracker"/>
    <include file="$(find-pkg-share detection_by_tracker)/launch/detection_by_tracker.launch.xml">
      <arg name="detection_by_tracker_param_path" value="$(var object_recognition_detection_detection_by_tracker_param)"/>
    </include>
  </group>

  <!-- CenterPoint -->
  <group if="$(eval &quot;'$(var lidar_detection_model)'=='centerpoint'&quot;)">
    <push-ros-namespace namespace="centerpoint"/>
    <group>
      <include file="$(find-pkg-share lidar_centerpoint)/launch/lidar_centerpoint.launch.xml">
        <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
        <arg name="output/objects" value="objects"/>
        <arg name="score_threshold" value="$(var lidar_detection_score_threshold)"/>
        <arg name="model_name" value="$(var centerpoint_model_name)"/>
        <arg name="model_path" value="$(var centerpoint_model_path)"/>
        <arg name="model_param_path" value="$(var lidar_model_param_path)/$(var centerpoint_model_name).param.yaml"/>
      </include>
    </group>
  </group>

  <!-- Lidar Apollo Instance Segmentation -->
  <group if="$(eval &quot;'$(var lidar_detection_model)'=='apollo'&quot;)">
    <push-ros-namespace namespace="apollo"/>
    <group>
      <include file="$(find-pkg-share lidar_apollo_instance_segmentation)/launch/lidar_apollo_instance_segmentation.launch.xml">
        <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
        <arg name="output/objects" value="labeled_clusters"/>
      </include>
    </group>

    <group>
      <include file="$(find-pkg-share shape_estimation)/launch/shape_estimation.launch.xml">
        <arg name="input/objects" value="labeled_clusters"/>
        <arg name="output/objects" value="objects_with_feature"/>
        <arg name="use_vehicle_reference_yaw" value="true"/>
        <arg name="use_vehicle_reference_shape_size" value="false"/>
      </include>
    </group>

    <!-- convert DynamicObjectsWithFeatureArray to DynamicObjects -->
    <group>
      <include file="$(find-pkg-share detected_object_feature_remover)/launch/detected_object_feature_remover.launch.xml">
        <arg name="input" value="objects_with_feature"/>
        <arg name="output" value="objects"/>
      </include>
    </group>
  </group>

  <!-- PointPainting -->
  <group if="$(eval &quot;'$(var lidar_detection_model)'=='pointpainting'&quot;)">
    <push-ros-namespace namespace="pointpainting"/>
    <include file="$(find-pkg-share image_projection_based_fusion)/launch/pointpainting_fusion.launch.xml">
      <arg name="input/camera_info0" value="$(var camera_info0)"/>
      <arg name="input/rois0" value="$(var detection_rois0)"/>
      <arg name="input/camera_info1" value="$(var camera_info1)"/>
      <arg name="input/rois1" value="$(var detection_rois1)"/>
      <arg name="input/camera_info2" value="$(var camera_info2)"/>
      <arg name="input/rois2" value="$(var detection_rois2)"/>
      <arg name="input/camera_info3" value="$(var camera_info3)"/>
      <arg name="input/rois3" value="$(var detection_rois3)"/>
      <arg name="input/camera_info4" value="$(var camera_info4)"/>
      <arg name="input/rois4" value="$(var detection_rois4)"/>
      <arg name="input/camera_info5" value="$(var camera_info5)"/>
      <arg name="input/rois5" value="$(var detection_rois5)"/>
      <arg name="input/camera_info6" value="$(var camera_info6)"/>
      <arg name="input/rois6" value="$(var detection_rois6)"/>
      <arg name="input/camera_info7" value="$(var camera_info7)"/>
      <arg name="input/rois7" value="$(var detection_rois7)"/>
      <arg name="input/rois_number" value="$(var image_number)"/>
      <arg name="input/image0" value="$(var image_raw0)"/>
      <arg name="input/image1" value="$(var image_raw1)"/>
      <arg name="input/image2" value="$(var image_raw2)"/>
      <arg name="input/image3" value="$(var image_raw3)"/>
      <arg name="input/image4" value="$(var image_raw4)"/>
      <arg name="input/image5" value="$(var image_raw5)"/>
      <arg name="input/image6" value="$(var image_raw6)"/>
      <arg name="input/image7" value="$(var image_raw7)"/>
      <arg name="input/pointcloud" value="$(var input/pointcloud)"/>
      <arg name="output/objects" value="objects"/>
      <arg name="model_param_path" value="$(var lidar_model_param_path)/$(var lidar_detection_model).param.yaml"/>
      <arg name="class_remapper_param_path" value="$(var lidar_model_param_path)/detection_class_remapper.param.yaml"/>
    </include>
  </group>

  <!-- Radar fusion -->
  <group>
    <include file="$(find-pkg-share radar_fusion_to_detected_object)/launch/radar_object_fusion_to_detected_object.launch.xml" if="$(var use_near_radar_fusion)">
      <arg name="input/objects" value="$(var lidar_detection_model)/objects"/>
      <arg name="input/radars" value="radar/noise_filtered_objects"/>
      <arg name="output/objects" value="radar_fusion/objects"/>
    </include>
  </group>

  <!-- Camera late fusion -->
  <group>
    <let name="target_objects" value="radar_fusion/objects" if="$(var use_near_radar_fusion)"/>
    <let name="target_objects" value="$(var lidar_detection_model)/objects" unless="$(var use_near_radar_fusion)"/>

    <include file="$(find-pkg-share image_projection_based_fusion)/launch/roi_detected_object_fusion.launch.xml">
      <arg name="input/camera_info0" value="$(var camera_info0)"/>
      <arg name="input/rois0" value="$(var detection_rois0)"/>
      <arg name="input/camera_info1" value="$(var camera_info1)"/>
      <arg name="input/rois1" value="$(var detection_rois1)"/>
      <arg name="input/camera_info2" value="$(var camera_info2)"/>
      <arg name="input/rois2" value="$(var detection_rois2)"/>
      <arg name="input/camera_info3" value="$(var camera_info3)"/>
      <arg name="input/rois3" value="$(var detection_rois3)"/>
      <arg name="input/camera_info4" value="$(var camera_info4)"/>
      <arg name="input/rois4" value="$(var detection_rois4)"/>
      <arg name="input/camera_info5" value="$(var camera_info5)"/>
      <arg name="input/rois5" value="$(var detection_rois5)"/>
      <arg name="input/camera_info6" value="$(var camera_info6)"/>
      <arg name="input/rois6" value="$(var detection_rois6)"/>
      <arg name="input/camera_info7" value="$(var camera_info7)"/>
      <arg name="input/rois7" value="$(var detection_rois7)"/>
      <arg name="input/rois_number" value="$(var image_number)"/>
      <arg name="input/image0" value="$(var image_raw0)"/>
      <arg name="input/image1" value="$(var image_raw1)"/>
      <arg name="input/image2" value="$(var image_raw2)"/>
      <arg name="input/image3" value="$(var image_raw3)"/>
      <arg name="input/image4" value="$(var image_raw4)"/>
      <arg name="input/image5" value="$(var image_raw5)"/>
      <arg name="input/image6" value="$(var image_raw6)"/>
      <arg name="input/image7" value="$(var image_raw7)"/>
      <arg name="input/objects" value="$(var target_objects)"/>
      <arg name="output/objects" value="$(var lidar_detection_model)/roi_fusion/objects"/>
    </include>
  </group>

  <!-- Validator -->
  <group if="$(eval &quot;'$(var objects_validation_method)'=='obstacle_pointcloud'&quot;)">
    <let name="validator/input/obstacle_pointcloud" value="/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud" if="$(var use_pointcloud_map)"/>
    <let name="validator/input/obstacle_pointcloud" value="$(var input/obstacle_segmentation/pointcloud)" unless="$(var use_pointcloud_map)"/>
    <include file="$(find-pkg-share detected_object_validation)/launch/obstacle_pointcloud_based_validator.launch.xml" if="$(var use_validator)">
      <arg name="input/detected_objects" value="$(var lidar_detection_model)/roi_fusion/objects"/>
      <arg name="input/obstacle_pointcloud" value="$(var validator/input/obstacle_pointcloud)"/>
      <arg name="output/objects" value="$(var lidar_detection_model)/validation/objects"/>
      <arg name="obstacle_pointcloud_based_validator_param_path" value="$(var object_recognition_detection_obstacle_pointcloud_based_validator_param_path)"/>
    </include>
  </group>

  <group if="$(eval &quot;'$(var objects_validation_method)'=='occupancy_grid'&quot;)">
    <include file="$(find-pkg-share detected_object_validation)/launch/occupancy_grid_based_validator.launch.xml" if="$(var use_validator)">
      <arg name="input/detected_objects" value="$(var lidar_detection_model)/objects"/>
      <arg name="output/objects" value="$(var lidar_detection_model)/validation/objects"/>
    </include>
  </group>

  <!-- Merger -->
  <group>
    <!-- 1st merger to merge camera_lidar_fusion + ML lidar detection-->
    <let name="merger/input/objects" value="$(var lidar_detection_model)/validation/objects" if="$(var use_validator)"/>
    <let name="merger/input/objects" value="$(var lidar_detection_model)/objects" unless="$(var use_validator)"/>
    <let name="without_dbt_and_filter" value="$(eval &quot;'$(var use_detection_by_tracker)'=='false' and '$(var use_object_filter)'=='false' &quot;)"/>
    <let name="merger/output/objects" value="near_objects" if="$(var without_dbt_and_filter)"/>
    <let name="merger/output/objects" value="$(var lidar_detection_model)_roi_cluster_fusion/objects" unless="$(var without_dbt_and_filter)"/>
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="$(var merger/input/objects)"/>
      <arg name="input/object1" value="clustering/camera_lidar_fusion/objects"/>
      <arg name="output/object" value="$(var merger/output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
    </include>
  </group>

  <group if="$(var use_detection_by_tracker)">
    <!-- 2nd merger to merge detection_by_tracker -->
    <let name="merger/output/objects" value="objects_before_filter" if="$(var use_object_filter)"/>
    <let name="merger/output/objects" value="near_objects" unless="$(var use_object_filter)"/>
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="$(var lidar_detection_model)_roi_cluster_fusion/objects"/>
      <arg name="input/object1" value="detection_by_tracker/objects"/>
      <arg name="priority_mode" value="0"/>
      <arg name="output/object" value="$(var merger/output/objects)"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
    </include>
  </group>

  <!-- Filter -->
  <group if="$(eval &quot;'$(var objects_filter_method)'=='lanelet_filter'&quot;)">
    <let name="filter/input/objects" value="objects_before_filter" if="$(var use_detection_by_tracker)"/>
    <let name="filter/input/objects" value="$(var lidar_detection_model)_roi_cluster_fusion/objects" unless="$(var use_detection_by_tracker)"/>
    <include file="$(find-pkg-share detected_object_validation)/launch/object_lanelet_filter.launch.xml" if="$(var use_object_filter)">
      <arg name="input/object" value="$(var filter/input/objects)"/>
      <arg name="output/object" value="$(var output_of_filtered_objects)"/>
      <arg name="filtering_range_param" value="$(var object_recognition_detection_object_lanelet_filter_param_path)"/>
    </include>
  </group>

  <group if="$(eval &quot;'$(var objects_filter_method)'=='position_filter'&quot;)">
    <let name="filter/input/objects" value="objects_before_filter" if="$(var use_detection_by_tracker)"/>
    <let name="filter/input/objects" value="$(var lidar_detection_model)_roi_cluster_fusion/objects" unless="$(var use_detection_by_tracker)"/>
    <include file="$(find-pkg-share detected_object_validation)/launch/object_position_filter.launch.xml" if="$(var use_object_filter)">
      <arg name="input/object" value="$(var filter/input/objects)"/>
      <arg name="output/object" value="$(var output_of_filtered_objects)"/>
      <arg name="filtering_range_param" value="$(var object_recognition_detection_object_position_filter_param_path)"/>
    </include>
  </group>

  <!-- Merge far_objects and near_objects in detection stage.
      Control parameter 'use_radar_tracking_fusion' should defined in perception.launch.xml -->
  <group unless="$(var use_radar_tracking_fusion)">
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="near_objects"/>
      <arg name="input/object1" value="radar/far_objects"/>
      <arg name="output/object" value="$(var output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
      <arg name="sync_queue_size" value="$(var far_object_merger_sync_queue_size)"/>
    </include>
  </group>
</launch>
