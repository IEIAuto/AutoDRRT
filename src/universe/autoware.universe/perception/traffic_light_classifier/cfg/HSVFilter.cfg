#! /usr/bin/env python

# set up parameters that we care about
PACKAGE = 'traffic_light_classifier'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator ()
# def add (self, name, paramtype, level, description, default = None, min = None, max = None, edit_method = ""):
gen.add ("green_min_h", int_t, 0, "min h green", 50, 0, 180)
gen.add ("green_max_h", int_t, 0, "max h green", 120, 0, 180)
gen.add ("green_min_s", int_t, 0, "min s green", 100, 0, 255)
gen.add ("green_max_s", int_t, 0, "max s green", 200, 0, 255)
gen.add ("green_min_v", int_t, 0, "min v green", 150, 0, 255)
gen.add ("green_max_v", int_t, 0, "max v green", 255, 0, 255)
gen.add ("yellow_min_h", int_t, 0, "min h yellow", 0, 0, 180)
gen.add ("yellow_max_h", int_t, 0, "max h yellow", 50, 0, 180)
gen.add ("yellow_min_s", int_t, 0, "min s yellow", 80, 0, 255)
gen.add ("yellow_max_s", int_t, 0, "max s yellow", 200, 0, 255)
gen.add ("yellow_min_v", int_t, 0, "min v yellow", 150, 0, 255)
gen.add ("yellow_max_v", int_t, 0, "max v yellow", 255, 0, 255)
gen.add ("red_min_h", int_t, 0, "min h red", 160, 0, 180)
gen.add ("red_max_h", int_t, 0, "max h red", 180, 0, 180)
gen.add ("red_min_s", int_t, 0, "min s red", 100, 0, 255)
gen.add ("red_max_s", int_t, 0, "max s red", 255, 0, 255)
gen.add ("red_min_v", int_t, 0, "min v red", 150, 0, 255)
gen.add ("red_max_v", int_t, 0, "max v red", 255, 0, 255)

exit (gen.generate (PACKAGE, "traffic_light_classifier", "HSVFilter"))
